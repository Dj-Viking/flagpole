import { Scenario } from "./scenario";
import { iResponse } from "./response";
export declare class Element {
    protected response: iResponse;
    protected name: string;
    protected obj: any;
    constructor(response: iResponse, name: string, obj: any);
    select(path: string, findIn?: any): Element;
    and(): Element;
    click(nextScenario: Scenario): Element;
    find(selector: string): Element;
    next(selector?: string): Element;
    prev(selector?: string): Element;
    closest(selector: string): Element;
    parents(selector?: string): Element;
    siblings(selector?: string): Element;
    children(selector?: string): Element;
    eq(i: number): Element;
    nth(i: number): Element;
    first(): Element;
    last(): Element;
    attribute(key: string): Element;
    property(key: string): Element;
    data(key: string): Element;
    val(): Element;
    text(): Element;
    hasClass(className: string): iResponse;
    each(callback: Function): iResponse;
    every(callback: Function): iResponse;
    some(callback: Function): iResponse;
    any(callback: Function): iResponse;
    length(): Element;
    parseFloat(): Element;
    parseInt(): Element;
    trim(): Element;
    toLowerCase(): Element;
    toUpperCase(): Element;
    replace(search: string | RegExp, replace: string): Element;
    greaterThan(value: number): iResponse;
    greaterThanOrEquals(value: any): iResponse;
    lessThan(value: number): iResponse;
    lessThanOrEquals(value: any): iResponse;
    not(): iResponse;
    toString(): string;
    get(): any;
    protected pass(message: string): Scenario;
    protected fail(message: string): Scenario;
    comment(message: string): iResponse;
    label(message: string): iResponse;
    echo(): Element;
    typeof(): Element;
    assert(statement: boolean, passMessage: string, failMessage: string): iResponse;
    contains(string: string): iResponse;
    matches(pattern: RegExp): iResponse;
    startsWith(matchText: string): iResponse;
    endsWith(matchText: string): iResponse;
    is(type: string): iResponse;
    exists(): iResponse;
    headers(key?: string): Element;
    equals(value: any, permissiveMatching?: boolean): iResponse;
    similarTo(value: any): iResponse;
}
