import { Scenario } from "./scenario";
import { iResponse } from "./response";
export declare class Node {
    protected response: iResponse;
    protected name: string;
    protected obj: any;
    constructor(response: iResponse, name: string, obj: any);
    protected isNullOrUndefined(): boolean;
    protected isDomElement(): boolean;
    protected getTagName(): string | null;
    protected getAttribute(name: string): string | null;
    protected getUrl(): string | null;
    protected isFormElement(): boolean;
    protected isButtonElement(): boolean;
    protected isLinkElement(): boolean;
    protected isImageElement(): boolean;
    protected isScriptElement(): boolean;
    protected isStylesheetElement(): boolean;
    protected isClickable(): boolean;
    protected isArray(): boolean;
    protected isString(): boolean;
    protected isObject(): boolean;
    protected hasProperty(key: string): boolean;
    protected pass(message: string): Scenario;
    protected fail(message: string): Scenario;
    get(index?: number): any;
    toString(): string;
    select(path: string, findIn?: any): Node;
    headers(key?: string): Node;
    status(): Node;
    loadTime(): Node;
    and(): Node;
    not(): Node;
    comment(message: string): Node;
    label(message: string): Node;
    echo(): Node;
    typeof(): Node;
    click(nextScenario: Scenario): Node;
    submit(nextScenario: Scenario): Node;
    fillForm(formData: any): Node;
    load(title: string, assertions?: (response: iResponse) => void): Node;
    find(selector: string): Node;
    closest(selector: string): Node;
    parents(selector?: string): Node;
    parent(): Node;
    siblings(selector: any): Node;
    children(selector: any): Node;
    next(selector: any): Node;
    prev(selector: any): Node;
    eq(i: number): Node;
    nth(i: number): Node;
    first(): Node;
    last(): Node;
    attribute(key: string): Node;
    property(key: string): Node;
    data(key: string): Node;
    val(): Node;
    text(): Node;
    length(): Node;
    parseFloat(): Node;
    parseInt(): Node;
    trim(): Node;
    toLowerCase(): Node;
    toUpperCase(): Node;
    replace(search: string | RegExp, replace: string): Node;
    each(callback: Function): Node;
    every(callback: Function): Node;
    some(callback: Function): Node;
    any(callback: Function): Node;
    hasClass(className: string): Node;
    greaterThan(value: number): Node;
    greaterThanOrEquals(value: any): Node;
    lessThan(value: number): Node;
    lessThanOrEquals(value: any): Node;
    between(minValue: any, maxValue: any): Node;
    assert(statement: boolean, passMessage: string, failMessage: string): Node;
    contains(string: string): Node;
    contain(string: string): Node;
    matches(pattern: RegExp): Node;
    startsWith(matchText: string): Node;
    endsWith(matchText: string): Node;
    is(type: string): Node;
    exists(): Node;
    equals(value: any, permissiveMatching?: boolean): Node;
    similarTo(value: any): Node;
}
