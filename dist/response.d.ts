import { Scenario } from "./scenario";
import { iResponse, SimplifiedResponse } from "./response";
import { Node } from "./node";
export interface iResponse {
    select(path: string, findIn?: any): Node;
    parents(selector?: string): Node;
    parent(): Node;
    closest(selector: string): Node;
    children(selector?: string): Node;
    siblings(selector?: string): Node;
    next(selector?: string): Node;
    prev(selector?: string): Node;
    status(): Node;
    and(): Node;
    loadTime(): Node;
    label(message: string): iResponse;
    setLastElement(path: string | null, element: Node): Node;
    getLastElement(): Node;
    comment(message: string): iResponse;
    headers(key?: string): Node;
    not(): iResponse;
    startIgnoringAssertions(): iResponse;
    stopIgnoringAssertions(): iResponse;
    assert(statement: boolean, passMessage: string, failMessage: string): iResponse;
    readonly scenario: Scenario;
}
export interface SimplifiedResponse {
    statusCode: number;
    body: string;
    headers: Array<any>;
}
export declare abstract class GenericResponse implements iResponse {
    readonly scenario: Scenario;
    protected url: string;
    protected response: SimplifiedResponse;
    protected flipAssertion: boolean;
    protected ignoreAssertion: boolean;
    protected _lastElement: Node;
    protected _lastElementPath: string | null;
    constructor(scenario: Scenario, url: string, response: SimplifiedResponse);
    abstract select(path: string, findIn?: any): Node;
    abstract parents(selector?: string): Node;
    abstract parent(): Node;
    abstract closest(selector: string): Node;
    abstract children(selector: string): Node;
    abstract siblings(selector: string): Node;
    abstract next(selector: string): Node;
    abstract prev(selector: string): Node;
    assert(statement: boolean, passMessage: any, failMessage: any): iResponse;
    protected reset(): iResponse;
    startIgnoringAssertions(): iResponse;
    stopIgnoringAssertions(): iResponse;
    not(): iResponse;
    setLastElement(path: string | null, element: Node): Node;
    getLastElement(): Node;
    get(): any;
    echo(): Node;
    typeof(): Node;
    and(): Node;
    comment(message: string): iResponse;
    headers(key?: string): Node;
    status(): Node;
    loadTime(): Node;
    label(message: string): iResponse;
    text(): Node;
    length(): Node;
    contains(string: string): iResponse;
    matches(pattern: RegExp): iResponse;
    startsWith(matchText: string): iResponse;
    endsWith(matchText: string): iResponse;
    trim(): Node;
    toLowerCase(): Node;
    toUpperCase(): Node;
    replace(search: string | RegExp, replace: string): Node;
    is(type: string): iResponse;
    each(callback: Function): iResponse;
    some(callback: Function): iResponse;
    every(callback: Function): iResponse;
    exists(): iResponse;
    parseInt(): Node;
    parseFloat(): Node;
    greaterThan(value: number): iResponse;
    greaterThanOrEquals(value: number): iResponse;
    lessThan(value: number): iResponse;
    lessThanOrEquals(value: number): iResponse;
    equals(value: any, permissiveMatching: boolean): iResponse;
    similarTo(value: any): iResponse;
}
